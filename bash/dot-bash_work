#!/usr/bin/env bash

export BROWSER=google-chrome
export DD_REALM=datadoghq.com
export EMAIL=gregoire.seux@$DD_REALM
export DATADOG_USERNAME=$EMAIL

export GIT_COMMITTER_NAME="Grégoire Seux"
export GIT_AUTHOR_NAME="Grégoire Seux"
export EDITOR=nvim

# google-cloud-sdk brew caveat
# source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc"
# source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"

# eval "$(nodenv init -)"

# Force certain more-secure behaviours from homebrew
export HOMEBREW_NO_INSECURE_REDIRECT=1
export HOMEBREW_CASK_OPTS=--require-sha
export HOMEBREW_DIR=/opt/homebrew
export HOMEBREW_BIN=/opt/homebrew/bin


# Load python shims
# this step is take ~180ms
# eval "$(pyenv init -)" 

# Load ruby shims
# this parts takes ~400ms
# eval "$(rbenv init -)"

# Prefer GNU binaries to Macintosh binaries.
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:${PATH}"

# Add AWS CLI to PATH
export PATH="/opt/homebrew/opt/awscli@1/bin:$PATH"

# Add datadog devtools binaries to the PATH
export PATH="${HOME?}/dd/devtools/bin:${PATH?}"

# Point GOPATH to our go sources
export GOPATH="${HOME?}/go"

# Add binaries that are go install-ed to PATH
export PATH="${GOPATH?}/bin:${PATH?}"

# Point DATADOG_ROOT to ~/dd symlink
export DATADOG_ROOT="${HOME?}/dd"

# Tell the devenv vm to mount $GOPATH/src rather than just dd-go
export MOUNT_ALL_GO_SRC=1

# store key in the login keychain instead of aws-vault managing a hidden keychain
export AWS_VAULT_KEYCHAIN_NAME=login

# tweak session times so you don't have to re-enter passwords every 5min
export AWS_SESSION_TTL=24h
export AWS_ASSUME_ROLE_TTL=1h

# Helm switch from storing objects in kubernetes configmaps to
# secrets by default, but we still use the old default.
export HELM_DRIVER=configmap

# Go 1.16+ sets GO111MODULE to off by default with the intention to
# remove it in Go 1.18, which breaks projects using the dep tool.
# https://blog.golang.org/go116-module-changes
export GO111MODULE=auto
export GOPRIVATE=github.com/DataDog
export GOPROXY=binaries.ddbuild.io,https://proxy.golang.org,direct
export GONOSUMDB=github.com/DataDog,go.ddbuild.io

# Configure Go to pull go.ddbuild.io packages.
export GOPROXY="binaries.ddbuild.io,proxy.golang.org,direct"
export GONOSUMDB="github.com/DataDog,go.ddbuild.io"
# END ANSIBLE MANAGED BLOCK


export GITLAB_TOKEN=$(security find-generic-password -a ${USER} -s gitlab_token -w)

# increase open file limit, it helps maven concurrent compilation
# see https://datadoghq.atlassian.net/wiki/spaces/ENG/pages/2348189629/Maven+Too+many+open+files+during+build
ulimit -n 32768
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export PATH=$PATH:~/go/bin

notify-send() {
  terminal-notifier -group $$ -message "$@" > /dev/null 2>&1
}


alias ddsource="cd $DATADOG_ROOT/dd-source"
alias logsbackend="cd $DATADOG_ROOT/logs-backend"
alias dcc="cd $DATADOG_ROOT/datacenter-config"
alias logsops="cd $DATADOG_ROOT/logs-ops"
alias k8sr="cd $DATADOG_ROOT/k8s-resources"

# allows to cd from anywhere
# export CDPATH=.:$DATADOG_ROOT/
# CDPATH leads some cd commands to output the destination path in stdout which breaks many scripts

# this method display the service catalog by going up in the hierarchy
find_service_catalog() {
  initial_dir=$1
  if [[ "$initial_dir" == "" ]]; then
    initial_dir=$(pwd)
  fi
  if [[ $(pwd) == "/" ]]; then
    echo "No service catalog found" >&2
    return
  fi
  if test -f $(pwd)/service.datadog.yaml; then
    cat $(pwd)/service.datadog.yaml
    echo "Found in $(pwd)" >&2
  else
    cd ..
    echo "searching service catalog in $(pwd)" >&2
    find_service_catalog "$initial_dir"
    cd $initial_dir
  fi
}

find_owner() {
  find_service_catalog | yq '.dd-team, .contacts'
}



cancel_workflow() {
  # url is of the form https://atlas.ddbuild.io/namespaces/default/workflows/babbb289-1297-42e6-9935-6eac676994c4_28/73329a9f-4e3f-4eda-8f79-6374ffa53422/history
  url=$1
  workflow_id=$(echo $url | sed -E 's|.*workflows/([^/]+)/.*|\1|')
  run_id=$(echo $url | sed -E "s|.*workflows/$workflow_id/([^/]+)(/.*)?|\1|")
  echo "Will cancel wid: $workflow_id, rid: $run_id"
  env=prod
  if echo $url | grep -q atlas-staging.ddbuild.io; then
    env=staging
  fi
  echo "Assuming this runs on $env"
  read -p "Reason: " reason
  atlas workflow terminate -c "$env" --reason $reason --workflow-id $workflow_id --run-id $run_id
}

if test -f ~/.bash-todo-squash; then
  source ~/.bash-todo-squash
fi


# https://datadoghq.atlassian.net/wiki/spaces/SECENG/pages/2610300092/Project+Iota+Git+Commit+Code+Signing+Setup+Guide#Signing-Commits-with-OpenSSH-(Recommended-for-MacOS)
ssh-add -l | grep "+git-commit-signing@datadoghq.com" > /dev/null || ssh-add --apple-use-keychain /Users/gregoire.seux/.ssh/datadog_git_commit_signing 2> /dev/null


# bazel helpers
#
function bzlw {
  echo "Getting all workflows for $1"
  bzl query "kind(_cnab_workflow_wrapper, $1)"
}

function bzlt {
  echo "Getting all targets for $1"
  bzl query "kind(cnab_action_invocation, $1)"
}

function bzl-go-test {
  echo "Alias: testing all go_test targets for $1"
  bzl test $(bzl query "kind('go_test', $1)")
}

function kubectx {
  # dctx is better because it refresh list of contexts
  echo "Using dctx instead of kubectx"
  dctx $@
}


_bzl_completion()
{
  export COMP_WORDS
  export COMP_CWORD
  export COMP_LINE
  output=$(ruby $HOME/.dotfiles/bash/bzl-completion.rb)
  readarray -t next_words < <(echo "$output" | jq -r .words)
  completion_count=$(echo "$output" | jq -r .word_count)
  if [[ $completion_count -gt 1 ]]; then
    # let’s use fzf to select only one value.
    # let’s make sure the ellispis is not the ... which has a special meaning in bazel
    COMPREPLY=($(echo "$next_words" | sed "s/ /\n/g" | fzf --tac --ellipsis="»»»" --scheme=path))
  else
    COMPREPLY=($(compgen -W "$next_words" "${COMP_WORDS[$COMP_CWORD]}"))
  fi
}

complete -F _bzl_completion bzl

# setup coterm test for kubectl wrapping
export PATH="$HOME/.ddcoterm/overrides:$PATH"

export PATH="$HOME/.ddcoterm/bin:$PATH"
