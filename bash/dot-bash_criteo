# /* vim: set filetype=sh : */

function knife_until {
  if [ $# -ne 1 ]; then
    echo "USAGE: $0 <NODE_NAME>" >&2
    exit 1
  fi
  NODE_NAME=$1
  START_TIME=$(date +%s)
  CURRENT_TIME=${START_TIME}
  KNIFE_OPTS="-i -R 1"
  TIMEOUT_TIME=$(date -d "${TIMEOUT} seconds" +%s)
  while ! bundle exec knife search node "name:${NODE_NAME} AND ohai_time:[${START_TIME} TO ${CURRENT_TIME}]" ${KNIFE_OPTS} 2>&1 | grep -q ${NODE_NAME};
  do
    echo -n .
    sleep 30
    CURRENT_TIME=$(date +%s)
  done
}

function j {
  xdg-open http://jira.criteois.com/browse/$1
}

export CRITEO_USER=g.seux
export PUBLISH_USER=g_seux
export AWS_JENKINS_PRIVATE_KEY=$HOME/.ssh/id_rsa.criteo

if test -f .env; then
  source ~/.env
fi

alias kibana="BUNDLE_GEMFILE=$HOME/criteo/ruby-gems/mesos-tools/Gemfile bundle exec kibana"

# Smart cd for criteo projects
_gerrit_clone() {
  project=$1
  repo=$2
  dir=$3
  echo git clone ssh://review.crto.in:29418/$project/$repo.git $dir
  git clone ssh://review.crto.in:29418/$project/$repo.git $dir
}

gerrit() {
  local project=$(dirname $1)
  local repo=$(basename $1)
  mkdir -p $HOME/criteo/$project
  dst="$HOME/criteo/$1"
  [[ ! -d "$dst" ]] && _gerrit_clone "$project" "$repo" "$dst"
  cd "$dst"
}
_gerrit_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command find ~/criteo/ -mindepth 2 -maxdepth 2 -type d | sed s@$HOME/criteo/@@)" -- $cur) )
}
complete -o default -F _gerrit_complete gerrit

_github_clone() {
  org=$1
  repo=$2
  dir=$3
  echo git clone ssh://git@github.com/$org/$repo.git $dir
  git clone ssh://git@github.com/$org/$repo.git $dir
}

github() {
  local org=$(dirname $1)
  local repo=$(basename $1)
  mkdir -p "$HOME/github/$org"
  dst="$HOME/github/$1"
  old_dst="$HOME/criteo/$1"
  if [[ -d "$old_dst" ]]; then
    mv "$old_dst" "$dst"
  fi
  [[ ! -d "$dst" ]] && _github_clone "$org" "$repo" "$dst"
  cd "$dst"
}
_github_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$((command find ~/github/ -mindepth 2 -maxdepth 2 -type d; command find ~/criteo/ -mindepth 2 -maxdepth 2) | sed s@$HOME/github/@@ | sed s@$HOME/criteo/@@)" -- $cur) )
}
complete -o default -F _github_complete github

forks() {
  github criteo-forks/$1
}
_forks_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command ls ~/criteo/criteo-forks/)" -- $cur) )
}
complete -o default -F _forks_complete forks

ck() {
  if ls ~/criteo/configuration/chef-cookbooks/cookbooks | grep -q $1; then
    cd ~/criteo/configuration/chef-cookbooks/cookbooks/$1
  else
    echo "âš  maybe this cookbook has migrated to configuration/chef-cookbooks"
    gerrit chef-cookbooks/$1
  fi
}
_ck_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command ls ~/criteo/chef-cookbooks/)" -- $cur) )
}
complete -o default -F _ck_complete ck
repo() {
  shortname=$(echo $1 | sed -re 's/^(chef-)?//')
  fullname=$(echo $1 | sed -re 's/^(chef-)?/chef-/')
  gerrit chef-repositories/$fullname
}
_repo_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command ls ~/criteo/chef-repositories/)" -- $cur) )
}
complete -o default -F _repo_complete repo
rubygem () {
  gerrit ruby-gems/$1
}
_gem_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command ls ~/criteo/ruby-gems/)" -- $cur) )
}
complete -o default -F _gem_complete rubygem
rpmpackage () {
  gerrit rpm-packages/$1
}
_rpmpackage_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command ls ~/criteo/rpm-packages/)" -- $cur) )
}
complete -o default -F _rpmpackage_complete rpmpackage

policy() {
  gerrit configuration/chef-configuration
   if [[ ! -z  "$1"  ]]; then
     if [[ -d policies/$1 ]]; then
       cd policies/$1
     else
       cd policies/*/$1
     fi
   fi
   true
}
_policy_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$(command find ~/criteo/configuration/chef-configuration/policies -mindepth 2 -maxdepth 2 -type d | sed -re 's|.*configuration/chef-configuration/policies/[^/]+/||')" -- $cur) )
}
complete -o default -F _policy_complete policy
# end of smart


function rdesktop() {
  rdesktop_base="command rdesktop -K -g 1200x800"
  dc=$(echo $1 | sed -re 's/[^\.]+\.([^\.]+)\..+/\1/')
  if [ ! -z "$dc" ]; then
    echo "Inserting '$dc' as domain name"
    password=$(cat ~/.watson_env | grep 'export SSH_PERSONAL_PASSWORD' | cut -d"'" -f2)
    $rdesktop_base -d $dc -u $CRITEO_USER -p "$password" $1
  else
    echo "No dc found, fallback to normal rdesktop"
    $rdesktop_base $1
  fi
}


rack_info()
{
 curl -s "https://rackenstein-api.crto.in/devices?serial_no=$1" | jq '.'
}

rack_ext_info()
{
 curl -s "https://rackenstein-api.crto.in/device/id/$(curl -s "https://rackenstein-api.crto.in/devices?serial_no=$1" | jq '.data.devices[0].id' | sed -e 's/"//g')/" | jq '.'
}

rack_vlan_info()
{
 rack_ext_info $1 | jq -r '.data[0].device_interface[] | .switch_port.vlan | select(.!=null)'
}

chef_serial_from_nodename()
{
 knife node show $1 -a dmi.system.serial_number | grep "^ " | awk '{ print $2 }'
}

#if ! grep -q dirty-harry <(echo $PATH); then
#  export PATH=/home/g_seux/ruby-gems/dirty-harry/bin:$PATH
#fi
alias diagnose='BUNDLE_GEMFILE=~/criteo/ruby-gems/dirty-harry/Gemfile bundle exec diagnose'
alias wimpi.sh='BUNDLE_GEMFILE=~/criteo/ruby-gems/dirty-harry/Gemfile bundle exec ~/criteo/ruby-gems/dirty-harry/bin/wimpi.sh'
alias cleaning-shell='BUNDLE_GEMFILE=~/criteo/ruby-gems/dirty-harry/Gemfile bundle exec cleaning_shell'
alias mesos-connect='BUNDLE_GEMFILE=~/criteo/ruby-gems/dirty-harry/Gemfile bundle exec mesos_connect'

d() {
  diagnose $@
}

marathon-post() {
    local app_conf=$1
    local dc=${CRITEO_DC:-par}
    local env=${CRITEO_ENV:-preprod}
    local marathon_service=${MARATHON_SERVICE:-mesos-marathon}

    set -x
    cat $app_conf | http POST https://$marathon_service.$dc.$env.crto.in/v2/apps
}

marathon-edit() {
    local app_query=$1
    local marathon=${MARATHON_SERVICE:-mesos-marathon}
    local marathon_url="https://$marathon.$CRITEO_DC.$CRITEO_ENV.crto.in"
    echo $marathon_url
    local app_id=$(curl -sn $marathon_url/v2/apps | jq '.apps[].id' -r | fzf --prompt "marathon app> " -q $app_query)
    if [[ -z $app_id ]]; then return; fi
    conf_file=$(mktemp "/tmp/${app_id//\//_}_XXXXX.json")
    echo $conf_file
    curl -sn "$marathon_url/v2/apps/$app_id" | \
        jq '.app | del(.lastTaskFailure, .tasks, .tasksStaged, .tasksRunning, .tasksHealthy, .tasksUnhealthy, .deployments, .version, .versionInfo)' >> $conf_file
    $EDITOR $conf_file
    marathon-put $conf_file
    rm $conf_file
}

marathon-put() {
    local app_conf=$1
    local dc=${CRITEO_DC:-par}
    local env=${CRITEO_ENV:-preprod}
    local marathon_service=${MARATHON_SERVICE:-mesos-marathon}
    local app_id=$(jq -r '.id' $app_conf)

    set -x
    cat $app_conf | http PUT https://$marathon_service.$dc.$env.crto.in/v2/apps/$app_id partialUpdate==false
}

marathon-global-delete() {
    local app=$1
    echo "global delete $app"
    for env in preprod prod
    do
        for dc in $(http https://consul-relay.par.$env.crto.in/v1/catalog/datacenters | jq '.[]' -r)
        do
            instances="$(http https://mesos-marathon.$dc.$env.crto.in/v2/apps/$app | jq '.app.instances')"
            if [ $instances = "0" ]
            then
                echo "delete $app in $dc $env ($instances instances)"
                # http DELETE https://mesos-marathon.$dc.$env.crto.in/v2/apps/$app
            else
                echo "not deleting $app in $dc $env ($instances instances)"
            fi
        done
    done
}

marathon_compare_version() {
    local marathon_url="https://mesos-marathon.$CRITEO_DC.$CRITEO_ENV.crto.in"
    local app_id=$(curl -sn $marathon_url/v2/apps | jq '.apps[].id' -r | fzf --prompt "marathon app> ")
    if [[ -z $app_id ]]; then return; fi
    local version1=$(curl -ns $marathon_url/v2/apps/$app_id/versions | jq '.versions[]' -r | sort -r | fzf --prompt "choose a first version> ")
    local version2=$(curl -ns $marathon_url/v2/apps/$app_id/versions | jq '.versions[]' -r | sort -r | fzf --prompt "choose a second version> ")
    if [[ ! -z $version1 && ! -z $version2 ]]; then
        vimdiff -c 'windo set ft=json' \
            <(curl -sn $marathon_url/v2/apps/$app_id/versions/$version1 | jq '.') \
            <(curl -sn $marathon_url/v2/apps/$app_id/versions/$version2 | jq '.')
                fi
}
gollum()
{
  go_lom.sh connect $@
}


# allow to complete cd command with specific directories from anywhere. Example: `cd strategic[TAB] to complete cd criteo/ruby-gems/strategic-air-command`
export CDPATH=.:$(find $HOME/criteo  -maxdepth 1 -type d | paste -sd:)

export PUBLISH_KEY=/home/grego/.ssh/id_rsa.criteo

export PATH=$PATH:$HOME/.kube/bin

if which k9s > /dev/null; then
  k9s completion bash > .bash_completion_k9s
  source .bash_completion_k9s
fi

source ~/.watson_env

export GRADLE_USER_HOME=$HOME/.gradle

export CDT_REMOTE_CONFIG_URL=https://moab-filer.crto.in/.filer/cdt/remote-config.json
